pragma solidity ^0.4.24;

// ----------------------------------------------------------------------------
// Sample token contract /* ตัวอย่างสัญญาโทเค็น */
//
// Symbol        : {{Oil}} /* ใส่ชื่อเหรียญที่เราต้องการ */
// Name          : {{Oil Token}} /* ชื่อเหรียญ ตามด้วย Token */
// Total supply  : {{1000000}} /* ราคาเหรียญ */
// Decimals      : {{8}}  /* ตำแหน่งทศนิยม */
// Owner Account : {{0x9e4Da3aA695511d63514D9Cef026fcac82fB716A}} /* บัญชีกระเป๋าตัวเอง ให้คัดลอกที่ METAMASK ตรง Account */
//
// Enjoy.
//
// (c) by Juan Cruz Martinez 2020. MIT Licence. /* คนเขียน Juan Cruz Martinez ใบอนุญาต MIT */
// ----------------------------------------------------------------------------


// ----------------------------------------------------------------------------
// Lib: Safe Math /* ความปลอดภัยคณิตศาสตร์ */
// ----------------------------------------------------------------------------
contract SafeMath {

    function safeAdd(uint a, uint b) public pure returns (uint c) {
        c = a + b;
        require(c >= a);
    }

    function safeSub(uint a, uint b) public pure returns (uint c) {
        require(b <= a);
        c = a - b;
    }

    function safeMul(uint a, uint b) public pure returns (uint c) {
        c = a * b;
        require(a == 0 || c / a == b);
    }

    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
}


/**
ERC Token Standard #20 Interface /* อินเทอร์เฟซ */
https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md 
*/
contract ERC20Interface {   /* ERC20 อินเทอร์เฟซ */
    function totalSupply() public constant returns (uint); /* ฟังก์ชั่น และผลตอบแทนคงที่สาธารณะ */
    function balanceOf(address tokenOwner) public constant returns (uint balance); /* ฟังก์ชั่น (ที่อยู่) ผลตอบแทนคงที่สาธารณะ (ยอดคงเหลือ) */
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining); 
    /* ค่าเผื่อการทำงาน (ที่อยู่ tokenOwner, ที่อยู่ของผู้รับเงิน) ผลตอบแทนคงที่สาธารณะ (คงเหลืออยู่) */
    
    function transfer(address to, uint tokens) public returns (bool success); /* การถ่ายโอนฟังก์ชัน (ที่อยู่, โทเค็น uint) ผลตอบแทนสาธารณะ (ความสำเร็จของบูล) */
    function approve(address spender, uint tokens) public returns (bool success); /* ฟังก์ชั่น transferFrom (ที่อยู่จาก, ที่อยู่ไปยัง, โทเค็น uint) ผลตอบแทนสาธารณะ (ความสำเร็จของบูล) */
    function transferFrom(address from, address to, uint tokens) public returns (bool success); 

    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}


/**
Contract function to receive approval and execute function in one call
Borrowed from MiniMeToken /* รับการอนุมัติและดำเนินการฟังก์ชั่นในการโทรครั้งเดียวยืมจาก MiniMeToken */
*/
contract ApproveAndCallFallBack {
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}

/**
ERC20 Token, with the addition of symbol, name and decimals and assisted token transfers
 /* โทเค็น ERC20 พร้อมการเพิ่มสัญลักษณ์ ชื่อ และทศนิยมและการโอนโทเค็นช่วยเหลือ */
*/
contract oilToken is ERC20Interface, SafeMath {
    string public symbol; /* สัญลักษณ์สาธารณะสตริง */
    string public  name; /* สตริงชื่อสาธารณะ */
    uint8 public decimals; /* ทศนิยมสาธารณะ */
    uint public _totalSupply;

    mapping(address => uint) balances;
    mapping(address => mapping(address => uint)) allowed; 


    // ------------------------------------------------------------------------
    // Constructor
    // ------------------------------------------------------------------------
    constructor() public {
        symbol = "Oil"; /* ใส่ชื่อเหรียญที่เราต้องการ */
        name = "Oil Token"; /* ชื่อเหรียญ ตามด้วย Token */
        decimals = 8; /* ตำแหน่งทศนิยม */
        _totalSupply = 1000000; /* ราคาเหรียญ */ 
        balances[0x9e4Da3aA695511d63514D9Cef026fcac82fB716A] = _totalSupply; /* บัญชีกระเป๋าตัวเอง ให้คัดลอกที่ METAMASK ตรง Account */
        emit Transfer(address(0), 0x9e4Da3aA695511d63514D9Cef026fcac82fB716A, _totalSupply); 
        /* บัญชีกระเป๋าตัวเอง ให้คัดลอกที่ METAMASK ตรง Account และตรวจสอบว่าตรงกับที่คัดลอกมาข้างต้นหรือเปล่า */
    }

     
    // ------------------------------------------------------------------------
    // Total supply 
    // ------------------------------------------------------------------------
    function totalSupply() public constant returns (uint) {
        return _totalSupply  - balances[address(0)];
    }
    
    // ------------------------------------------------------------------------
    // Get the token balance for account tokenOwner
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }

    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to to account /*โอนยอดคงเหลือจากบัญชีของเจ้าของโทเค็นไปยังบัญชี */
    // - Owner's account must have sufficient balance to transfer /* บัญชีของเจ้าของต้องมียอดเงินเพียงพอในการโอน */
    // - 0 value transfers are allowed /* อนุญาตให้โอนค่า 0 ได้ */
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
        balances[msg.sender] = safeSub(balances[msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        emit Transfer(msg.sender, to, tokens);
        return true;
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens
    // from the token owner's account
    //
    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md
    // recommends that there are no checks for the approval double-spend attack
    // as this should be implemented in user interfaces 
    // ------------------------------------------------------------------------
    function approve(address spender, uint tokens) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }


    // ------------------------------------------------------------------------
    // Transfer tokens from the from account to the to account 
    // The calling account must already have sufficient tokens approve(...)-d 
    // for spending from the from account and 
    // - From account must have sufficient balance to transfer 
    // - Spender must have sufficient allowance to transfer 
    // - 0 value transfers are allowed 
    // ------------------------------------------------------------------------
    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
        balances[from] = safeSub(balances[from], tokens);
        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        emit Transfer(from, to, tokens);
        return true;
    }


    // ------------------------------------------------------------------------
    // Returns the amount of tokens approved by the owner that can be /* คืนจำนวนโทเค็นที่ได้รับอนุมัติจากเจ้าของ */
    // transferred to the spender's account /* โอนเข้าบัญชีผู้ใช้จ่าย */
    // ------------------------------------------------------------------------
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens /* เจ้าของโทเค็นสามารถอนุมัติให้ผู้ใช้โอนจาก (...) โทเค็น */
    // from the token owner's account. The spender contract function /* จากบัญชีของเจ้าของโทเค็น ฟังก์ชั่นสัญญาผู้ใช้จ่าย */
    // receiveApproval(...) is then executed /* รับการอนุมัติ (...) จากนั้นดำเนินการ */
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);
        return true;
    }

    
    // ------------------------------------------------------------------------
    // Don't accept ETH
    // ------------------------------------------------------------------------
    function () public payable {
        revert();
    }
}
